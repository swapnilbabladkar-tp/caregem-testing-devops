AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  message-service

  SAM Template for message-service

Parameters:
  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: /caregem/VpcSubnet
  LambdaSecurityGroupId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/VpcSg
  AuthorizerLambdaArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AuthorizerLambdaArn
  Stage:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/Stage
  CognitoUserPool:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CognitoUserPool
  AwsRegion:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AwsRegion
  UserProfileTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/UserProfileTableName
  MysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MysqlSecret
  MlprepMysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MlprepMysqlSecret
  ChimeInstanceArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/ChimeInstanceArn
  AccessLogArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AccessLogArn
  MessageSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MessageSecret
  ChimePSTNNumber:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/ChimePSTNNumer
  WebSocketURL:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/WebSocketURL
  CaregemS3Config:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CaregemS3Config
  UseTwilio:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/UseTwilio
  TwilioSMSEnabled:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/TwilioSMSEnabled

Globals:
  Function:
    Timeout: 10
    MemorySize: 512
    Runtime: python3.9
    Architectures:
      - x86_64
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroupId
      SubnetIds: !Ref PrivateSubnets
    Environment:
      Variables:
        LOG_LEVEL: 'INFO'
        DB_SECRET_NAME: !Ref MysqlSecret
        MLPREP_SECRET_NAME: !Ref MlprepMysqlSecret
        DYNAMODB_REGION: !Ref AwsRegion
        AWSREGION: !Ref AwsRegion
        USER_POOL_REGION: !Ref AwsRegion
        USER_PROFILE_TABLE_NAME: !Ref UserProfileTableName
        USER_POOL_ID: !Ref CognitoUserPool
        CHIME_INSTANCE_ARN: !Ref ChimeInstanceArn
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/utilLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
  MessageLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/messageLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Name: Message Api
      Description: Message Service
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !Ref AuthorizerLambdaArn
      AccessLogSetting:
        DestinationArn: !Ref AccessLogArn
        Format: '{
          "requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod", "path":"$context.path", "resourcePath":"$context.resourcePath", "status":"$context.status", "responseLatency":"$context.responseLatency",
          "integrationRequestId":"$context.integration.requestId", "functionResponseStatus":"$context.integration.status", "authorizeResultStatus":"$context.authorize.status", "authorizerServiceStatus":"$context.authorizer.status",
          "authorizerRequestId":"$context.authorizer.requestId","authorizeError":"$context.authorize.error", "claims": "$context.authorizer.claims",
          "ip":"$context.identity.sourceIp", "userAgent":"$context.identity.userAgent", "principalId":"$context.authorizer.principalId", "cognitoUser":"$context.identity.cognitoIdentityId", "user":"$context.identity.user",
          "apiId":"$context.apiId"
        }'

  WebSocketChimeApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocket-Chime-Api
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketChimeApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketChimeApi
      RouteKey: "$disconnect"
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketChimeApi
      RouteKey: "sendMessage"
      AuthorizationType: NONE
      OperationName: SendMessageRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendMessageIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketChimeApi
      Description: connect integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageWebSocketConnect.Arn}/invocations"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketChimeApi
      Description: disconnect integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageWebSocketDisconnect.Arn}/invocations"

  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketChimeApi
      Description: send message integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessageChatWebSockets.Arn}/invocations"

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - SendMessageRoute
    Properties:
      ApiId: !Ref WebSocketChimeApi

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref Stage
      Description: !Sub "${Stage} Stage"
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketChimeApi

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketChimeApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageWebSocketConnect
      Principal: apigateway.amazonaws.com

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketChimeApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageWebSocketDisconnect
      Principal: apigateway.amazonaws.com

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketChimeApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MessageChatWebSockets
      Principal: apigateway.amazonaws.com

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: caregem-secret-manager-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: caregem-cognito-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                Resource: '*'
        - PolicyName: caregem-dynamodb-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DeleteItem
                Resource: '*'
        - PolicyName: caregem-sns-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: '*'
        - PolicyName: caregem-chime-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - chime:CreateChannel
                  - chime:CreateChannelMembership
                  - chime:DeleteChannelMembership
                  - chime:BatchCreateChannelMembership
                  - chime:ListChannelMemberships
                  - chime:UpdateChannel
                  - chime:DeleteChannel
                  - chime:ListChannelMessages
                  - chime:GetMeeting
                  - chime:GetAttendee
                  - chime:DeleteMeeting
                  - chime:CreateMeeting
                  - chime:CreateAttendee
                  - chime:CreateMeetingDialOut
                  - chime:SendChannelMessage
                Resource: '*'
        - PolicyName: caregem-s3-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 'arn:aws:s3:::*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess

  MessagePatientChats:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-Patient-Chats-Lambda
      CodeUri: ./
      Handler: patient_chats.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientChat:
          Type: Api
          Properties:
            Path: /messages/patient/{patient_id}
            Method: GET
            RestApiId: !Ref Api

  MessageChatMessages:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-Chats-MessagesLambda
      CodeUri: ./
      Handler: chat_messages.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        ChatMessages:
          Type: Api
          Properties:
            Path: /messages/chats/{chat_id}
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret

  MessageMyChatMessages:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-My-Chats-Messages-Lambda
      CodeUri: ./
      Handler: get_my_chats.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetChatMessages:
          Type: Api
          Properties:
            Path: /messages/message
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret

  MessageChimeChat:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-Chime-Chat-Lambda
      CodeUri: ./
      Handler: chat.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetAndCreateChannel:
          Type: Api
          Properties:
            Path: /messages/channel
            Method: GET
            RestApiId: !Ref Api
        UpdatePatientParticipation:
          Type: Api
          Properties:
            Path: /messages/patientParticipation
            Method: PUT
            RestApiId: !Ref Api
        GetUserChannel:
          Type: Api
          Properties:
            Path: /messages/userChannel
            Method: GET
            RestApiId: !Ref Api
        GetAllMessages:
          Type: Api
          Properties:
            Path: /messages/allChats
            Method: GET
            RestApiId: !Ref Api
        GetChannelMessages:
          Type: Api
          Properties:
            Path: /messages/channelMessages
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret

  MessageChimeMeeting:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-Chime-Meeting-Lambda
      CodeUri: ./
      Handler: meeting.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        CreateMeeting:
          Type: Api
          Properties:
            Path: /messages/createMeeting/{owner}
            Method: POST
            RestApiId: !Ref Api
        JoinMeeting:
          Type: Api
          Properties:
            Path: /messages/joinMeeting/{meetingId}/{participant}
            Method: PUT
            RestApiId: !Ref Api
        ActiveMeeting:
          Type: Api
          Properties:
            Path: /messages/activeMeeting/{participant}
            Method: GET
            RestApiId: !Ref Api
        EndMeeting:
          Type: Api
          Properties:
            Path: /messages/endMeeting/{meetingId}
            Method: PUT
            RestApiId: !Ref Api
      Environment:
        Variables:
          AWS_CHIME_PSTN_NUMBER: !Ref ChimePSTNNumber
          ENVIRONMENT: !Ref Stage
          BUCKET_NAME: !Ref CaregemS3Config
          S3_FILE_NAME: caregem_urls.json
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret
          USE_TWILIO: !Ref UseTwilio
          SMS_ENABLED: !Ref TwilioSMSEnabled

  MessageChimeAttendeeJoined:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-Chime-Attendee-Joined-Lambda
      CodeUri: ./
      Handler: attendee_joined.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          AWS_CHIME_PSTN_NUMBER: !Ref ChimePSTNNumber

  MessageChatWebSockets:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-Chat-WebSockets-Lambda
      CodeUri: ./
      Handler: web_socket_message.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          WEB_SOCKET_ENDPOINT_URL: !Ref WebSocketURL
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret
          USE_TWILIO: !Ref UseTwilio
          SMS_ENABLED: !Ref TwilioSMSEnabled

  MessageWebSocketConnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-WebSockets-Connect-Lambda
      CodeUri: ./
      Handler: web_socket_connect.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn

  MessageWebSocketDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-WebSockets-Disconnect-Lambda
      CodeUri: ./
      Handler: web_socket_disconnect.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn

  MessagesHistory:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Message-History
      CodeUri: ./
      Handler: get_messages_history.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        MessagesHist:
          Type: Api
          Properties:
            Path: /messages/history
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret
Outputs:
  MessageApi:
    Description: 'API Gateway endpoint URL for NonProd stage for Message Service'
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
