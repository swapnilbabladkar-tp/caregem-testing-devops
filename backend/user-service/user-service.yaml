AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  user-service

  SAM Template for admin-service

Parameters:
  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: /caregem/VpcSubnet
  LambdaSecurityGroupId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default:  /caregem/VpcSg
  AuthorizerLambdaArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AuthorizerLambdaArn
  Stage:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/Stage
  CognitoUserPool:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CognitoUserPool
  AwsRegion:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AwsRegion
  UserProfileTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/UserProfileTableName
  MysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MysqlSecret
  MlprepMysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MlprepMysqlSecret
  AccessLogArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AccessLogArn
  CognitoSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CognitoSecret
  MessageSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MessageSecret
  EmailSource:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/EmailSource
  EmailSourceArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/EmailSourceArn
  DestinationEmailList:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/DestinationEmailList
  SftpSecretName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/SftpSecretName
  CDSCustomerAdminId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CDSCustomerAdminId
  UseTwilio:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/UseTwilio
  TwilioSMSEnabled:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/TwilioSMSEnabled


Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: python3.9
    Architectures:
      - x86_64
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroupId
      SubnetIds:
        !Ref PrivateSubnets
    Environment:
      Variables:
        LOG_LEVEL: "INFO"
        DB_SECRET_NAME: !Ref MysqlSecret
        MLPREP_SECRET_NAME: !Ref MlprepMysqlSecret
        DYNAMODB_REGION: !Ref AwsRegion
        AWSREGION: !Ref AwsRegion
        USER_POOL_REGION: !Ref AwsRegion
        USER_PROFILE_TABLE_NAME: !Ref UserProfileTableName
        USER_POOL_ID: !Ref CognitoUserPool
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/utilLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
  MessageLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/messageLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: caregem-secret-manager-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: caregem-cognito-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminAddUserToGroup
                Resource: '*'
        - PolicyName: caregem-dynamodb-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchGetItem
                Resource: '*'
        - PolicyName: caregem-ses-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
        - PolicyName: caregem-sns-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Name: User Api
      Description: User Service
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !Ref AuthorizerLambdaArn
      AccessLogSetting:
        DestinationArn: !Ref AccessLogArn
        Format: '{
          "requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod", "path":"$context.path", "resourcePath":"$context.resourcePath", "status":"$context.status", "responseLatency":"$context.responseLatency",
          "integrationRequestId":"$context.integration.requestId", "functionResponseStatus":"$context.integration.status", "authorizeResultStatus":"$context.authorize.status", "authorizerServiceStatus":"$context.authorizer.status",
          "authorizerRequestId":"$context.authorizer.requestId","authorizeError":"$context.authorize.error", "claims": "$context.authorizer.claims",
          "ip":"$context.identity.sourceIp", "userAgent":"$context.identity.userAgent", "principalId":"$context.authorizer.principalId", "cognitoUser":"$context.identity.cognitoIdentityId", "user":"$context.identity.user",
          "apiId":"$context.apiId"
        }'
  AccessLogGroup:
    Type: AWS::Logs::LogGroup


  UserPatientCrudFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Patient-Crud-Lambda
      CodeUri: ./
      Handler: patient_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetAllPatients:
          Type: Api
          Properties:
            Path: /users/patients
            Method: GET
            RestApiId: !Ref Api
        GetPatient:
          Type: Api
          Properties:
            Path: /users/patient/{patient_id}
            Method: GET
            RestApiId: !Ref Api
        UpdatePatient:
          Type: Api
          Properties:
            Path: /users/patient/{patient_id}
            Method: PUT
            RestApiId: !Ref Api
        CreatePatient:
          Type: Api
          Properties:
            Path: /users/patient/
            Method: POST
            RestApiId: !Ref Api
        DeletePatient:
          Type: Api
          Properties:
            Path: /users/patient/{patient_id}
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          EMAIL_SOURCE: !Ref EmailSource
          EMAIL_SOURCE_ARN: !Ref EmailSourceArn

  UserCaregiverCrudFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Caregiver-Crud-Lambda
      CodeUri: ./
      Handler: caregiver_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetAllCaregivers:
          Type: Api
          Properties:
            Path: /users/caregivers
            Method: GET
            RestApiId: !Ref Api
        GetCaregiver:
          Type: Api
          Properties:
            Path: /users/caregiver/{caregiver_id}
            Method: GET
            RestApiId: !Ref Api
        UpdateCaregiver:
          Type: Api
          Properties:
            Path: /users/caregiver/{caregiver_id}
            Method: PUT
            RestApiId: !Ref Api
        CreateCaregiver:
          Type: Api
          Properties:
            Path: /users/caregiver/
            Method: POST
            RestApiId: !Ref Api
        DeleteCaregiver:
          Type: Api
          Properties:
            Path: /users/caregiver/{caregiver_id}
            Method: DELETE
            RestApiId: !Ref Api

  UserProviderCrudFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Provider-Crud-Lambda
      CodeUri: ./
      Handler: provider_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetAllPhysicians:
          Type: Api
          Properties:
            Path: /users/physicians
            Method: GET
            RestApiId: !Ref Api
        GetAllNurses:
          Type: Api
          Properties:
            Path: /users/nurses
            Method: GET
            RestApiId: !Ref Api
        GetAllCaseManagers:
          Type: Api
          Properties:
            Path: /users/case_managers
            Method: GET
            RestApiId: !Ref Api
        GetAllProviders:
          Type: Api
          Properties:
            Path: /users/providers
            Method: GET
            RestApiId: !Ref Api
        GetProvider:
          Type: Api
          Properties:
            Path: /users/provider/{provider_id}
            Method: GET
            RestApiId: !Ref Api
        UpdateProvider:
          Type: Api
          Properties:
            Path: /users/provider/{provider_id}
            Method: PUT
            RestApiId: !Ref Api
        CreateProvider:
          Type: Api
          Properties:
            Path: /users/provider/
            Method: POST
            RestApiId: !Ref Api
        DeleteProvider:
          Type: Api
          Properties:
            Path: /users/provider/{provider_id}
            Method: DELETE
            RestApiId: !Ref Api

  UpdateUserCDS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Update-User-CDS-Lambda
      CodeUri: ./
      Handler: crontask.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Name: CRON_TASK_UPDATE_USER_CDS
            Schedule: cron(* * * * ? *)
      Environment:
        Variables:
          CUSTOMER_ADMIN_ID: !Ref CDSCustomerAdminId
          SFTP_SECRET_ID: !Ref SftpSecretName
          EMAIL_SOURCE: !Ref EmailSource
          EMAIL_SOURCE_ARN: !Ref EmailSourceArn

  UserProcessException:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Process-Exception-Lambda
      CodeUri: ./
      Handler: process_exception.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 30
      Events:
        GetException:
          Type: Api
          Properties:
            Path: /users/exceptions
            Method: GET
            RestApiId: !Ref Api
        UpdateExceptionStatus:
          Type: Api
          Properties:
            Path: /users/exception/status/{id}
            Method: PUT
            RestApiId: !Ref Api
        CreateUserException:
          Type: Api
          Properties:
            Path: /users/exception/create/{id}
            Method: PUT
            RestApiId: !Ref Api
        UpdateUserException:
          Type: Api
          Properties:
            Path: /users/exception/update/{id}
            Method: PUT
            RestApiId: !Ref Api
      Environment:
        Variables:
          SFTP_SECRET_ID: !Ref SftpSecretName

  UserOrganizationCrud:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Organization-Crud-Lambda
      CodeUri: ./
      Handler: organization_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 5
      Events:
        GetOrganizationListing:
          Type: Api
          Properties:
            Path: /users/orgs
            Method: GET
            RestApiId: !Ref Api
        GetOrganization:
          Type: Api
          Properties:
            Path: /users/org/{org_id}
            Method: GET
            RestApiId: !Ref Api
        CreateOrganization:
          Type: Api
          Properties:
            Path: /users/org
            Method: POST
            RestApiId: !Ref Api
        UpdateOrganization:
          Type: Api
          Properties:
            Path: /users/org/{org_id}
            Method: PUT
            RestApiId: !Ref Api

  UserCustomerAdminCrud:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Customer-Admin-Crud-Lambda
      CodeUri: ./
      Handler: admin_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 5
      Events:
        GetCustomerAdminListing:
          Type: Api
          Properties:
            Path: /users/admins/{org_id}
            Method: GET
            RestApiId: !Ref Api
        GetCustomerAdmin:
          Type: Api
          Properties:
            Path: /users/admin/{customer_admin_id}
            Method: GET
            RestApiId: !Ref Api
        CreateCustomerAdmin:
          Type: Api
          Properties:
            Path: /users/admin
            Method: POST
            RestApiId: !Ref Api
        UpdateCustomerAdmin:
          Type: Api
          Properties:
            Path: /users/admin/{customer_admin_id}
            Method: PUT
            RestApiId: !Ref Api
        DeleteCustomerAdmin:
          Type: Api
          Properties:
            Path: /users/admin/{customer_admin_id}
            Method: DELETE
            RestApiId: !Ref Api
      Environment:
        Variables:
          EMAIL_SOURCE: !Ref EmailSource
          EMAIL_SOURCE_ARN: !Ref EmailSourceArn
          DESTINATION_EMAIL_LIST: !Ref DestinationEmailList

  UserGetForgotUsername:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Get-Forgot-Username-Lambda
      CodeUri: ./
      Handler: username.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 5
      Events:
        GetUserName:
          Type: Api
          Properties:
            Path: /users/username
            Method: GET
            RestApiId: !Ref Api
        ForgotPassword:
          Type: Api
          Properties:
            Path: /users/forgot_password
            Method: GET
            RestApiId: !Ref Api
            Auth:
              Authorizer: 'NONE'
      Environment:
        Variables:
          COGNITO_SECRET_ID: !Ref CognitoSecret

  UserArchivedCrud:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Archived-Crud-Lambda
      CodeUri: ./
      Handler: archived_crud.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.9
      Timeout: 5
      Events:
        GetArchivedListing:
          Type: Api
          Properties:
            Path: /users/archived
            Method: GET
            RestApiId: !Ref Api
        UndeleteUser:
          Type: Api
          Properties:
            Path: /users/reactivate/{user_id}
            Method: PUT
            RestApiId: !Ref Api

  UserProfileLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Profile-Lambda
      CodeUri: ./
      Handler: user_profile.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        UserProfile:
          Type: Api
          Properties:
            Path: /users/auth
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          DYNAMODB_REGION: !Ref AwsRegion
          ANDROID_VERSION_CODE: 79
          IOS_BUILD_VERSION: 85
          ANDROID_FORCE_UPDATE_BELOW_VERSION_CODE: 78
          IOS_FORCE_UPDATE_BELOW_BUILD_VERSION: 84
          PLAY_STORE_SHORT_URL: https://bit.ly/2wcueJo
          APP_STORE_SHORT_URL: https://apple.co/2IqcknT
          USE_TWILIO: !Ref UseTwilio
          SMS_ENABLED: !Ref TwilioSMSEnabled
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret
  UserDiagnosisLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Diagnosis-Lambda
      CodeUri: ./
      Handler: diagnosis.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        UserProfile:
          Type: Api
          Properties:
            Path: /users/diagnosis
            Method: GET
            RestApiId: !Ref Api

  UserAlertReceiverLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Alert-Receiver-Lambda
      CodeUri: ./
      Handler: alert_receiver.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        UserProfile:
          Type: Api
          Properties:
            Path: /users/alerts/{prv_id}
            Method: PUT
            RestApiId: !Ref Api

  UserChangeLogLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User-Change-Log-Lambda
      CodeUri: ./
      Handler: change_log.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        UserProfile:
          Type: Api
          Properties:
            Path: /users/change_log/{user_id}/{user_role}
            Method: GET
            RestApiId: !Ref Api

  ProviderDegreeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Provider-Degree-Lambda
      CodeUri: ./
      Handler: provider_degrees.lambda_handler
      Runtime: python3.9
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        UserProfile:
          Type: Api
          Properties:
            Path: /users/provider_degrees
            Method: GET
            RestApiId: !Ref Api

Outputs:
  UserApi:
    Description: "API Gateway endpoint URL for NonProd stage for User Service"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
