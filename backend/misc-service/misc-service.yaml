AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Misc-service

  SAM Template for Misc-service

Parameters:
  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: /caregem/VpcSubnet
  LambdaSecurityGroupId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/VpcSg
  AuthorizerLambdaArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AuthorizerLambdaArn
  Stage:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/Stage
  CognitoUserPool:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CognitoUserPool
  AwsRegion:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AwsRegion
  UserProfileTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/UserProfileTableName
  MysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MysqlSecret
  MlprepMysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MlprepMysqlSecret
  AccessLogArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AccessLogArn
  EmailSource:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/EmailSource
  EmailSourceArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/EmailSourceArn
  CaregemS3Config:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CaregemS3Config
  MessageSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MessageSecret
  UseTwilio:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/UseTwilio
  TwilioSMSEnabled:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/TwilioSMSEnabled

Globals:
  Function:
    Timeout: 20
    MemorySize: 512
    Runtime: python3.9
    Architectures:
      - x86_64
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroupId
      SubnetIds: !Ref PrivateSubnets
    Environment:
      Variables:
        LOG_LEVEL: 'INFO'
        DB_SECRET_NAME: !Ref MysqlSecret
        MLPREP_SECRET_NAME: !Ref MlprepMysqlSecret
        DYNAMODB_REGION: !Ref AwsRegion
        AWSREGION: !Ref AwsRegion
        USER_POOL_REGION: !Ref AwsRegion
        USER_PROFILE_TABLE_NAME: !Ref UserProfileTableName
        USER_POOL_ID: !Ref CognitoUserPool
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  MessageLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/messageLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/utilLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Name: Misc Api
      Description: Misc Service
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !Ref AuthorizerLambdaArn
      AccessLogSetting:
        DestinationArn: !Ref AccessLogArn
        Format: '{
          "requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod", "path":"$context.path", "resourcePath":"$context.resourcePath", "status":"$context.status", "responseLatency":"$context.responseLatency",
          "integrationRequestId":"$context.integration.requestId", "functionResponseStatus":"$context.integration.status", "authorizeResultStatus":"$context.authorize.status", "authorizerServiceStatus":"$context.authorizer.status",
          "authorizerRequestId":"$context.authorizer.requestId","authorizeError":"$context.authorize.error", "claims": "$context.authorizer.claims",
          "ip":"$context.identity.sourceIp", "userAgent":"$context.identity.userAgent", "principalId":"$context.authorizer.principalId", "cognitoUser":"$context.identity.cognitoIdentityId", "user":"$context.identity.user",
          "apiId":"$context.apiId"
        }'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: caregem-secret-manager-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:TagResource
                  - secretsmanager:ListSecrets
                Resource: '*'
        - PolicyName: caregem-s3-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 'arn:aws:s3:::*'
        - PolicyName: caregem-dynamodb-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:ConditionCheckItem
                Resource: '*'
        - PolicyName: caregem-sns-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: '*'
        - PolicyName: caregem-ses-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  MiscGetTemplates:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Misc-Get-Templates-Lambda
      CodeUri: ./
      Handler: template.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Events:
        Disclaimer:
          Type: Api
          Properties:
            Path: /misc/disclaimer
            Method: GET
            RestApiId: !Ref Api
        TermsProviders:
          Type: Api
          Properties:
            Path: /misc/termsProviders
            Method: GET
            RestApiId: !Ref Api
        EulaProviders:
          Type: Api
          Properties:
            Path: /misc/eulaProviders
            Method: GET
            RestApiId: !Ref Api
        Privacy:
          Type: Api
          Properties:
            Path: /misc/privacy
            Method: GET
            RestApiId: !Ref Api
        TermsPatients:
          Type: Api
          Properties:
            Path: /misc/termsPatients
            Method: GET
            RestApiId: !Ref Api
        EulaPatients:
          Type: Api
          Properties:
            Path: /misc/eulaPatients
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          BUCKET_NAME: !Ref CaregemS3Config

  MiscGetMobileAppNav:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Misc-Get-Mobile-App-Nav-Lambda
      CodeUri: ./
      Handler: mobile_app_nav.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Events:
        Navigation:
          Type: Api
          Properties:
            Path: /misc/mobileNav
            Method: GET
            RestApiId: !Ref Api
            Auth:
              Authorizer: 'NONE'
      Environment:
        Variables:
          BUCKET_TEMPLATE_NAME: caregem-mobile-app
          FILE_NAME: mobile_nav.json

  MiscSurveyApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Misc-Survey-Api-Lambda
      CodeUri: ./
      Handler: survey.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref MessageLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        SurveyFalls:
          Type: Api
          Properties:
            Path: /misc/survey/falls
            Method: POST
            RestApiId: !Ref Api
        SurveyNausea:
          Type: Api
          Properties:
            Path: /misc/survey/nausea
            Method: POST
            RestApiId: !Ref Api
        SurveyFever:
          Type: Api
          Properties:
            Path: /misc/survey/fever
            Method: POST
            RestApiId: !Ref Api
        SurveyFatigue:
          Type: Api
          Properties:
            Path: /misc/survey/fatigue
            Method: POST
            RestApiId: !Ref Api
        SurveyBreath:
          Type: Api
          Properties:
            Path: /misc/survey/breath
            Method: POST
            RestApiId: !Ref Api
        SurveySwelling:
          Type: Api
          Properties:
            Path: /misc/survey/swelling
            Method: POST
            RestApiId: !Ref Api
        SurveyWeightchange:
          Type: Api
          Properties:
            Path: /misc/survey/weightchange
            Method: POST
            RestApiId: !Ref Api
        SurveyChestpain:
          Type: Api
          Properties:
            Path: /misc/survey/chestpain
            Method: POST
            RestApiId: !Ref Api
        SurveyAcesAndPain:
          Type: Api
          Properties:
            Path: /misc/survey/pain
            Method: POST
            RestApiId: !Ref Api
        SurveyLightheadedness:
          Type: Api
          Properties:
            Path: /misc/survey/lightheadedness
            Method: POST
            RestApiId: !Ref Api
        SurveyAppetite:
          Type: Api
          Properties:
            Path: /misc/survey/appetite
            Method: POST
            RestApiId: !Ref Api
        SurveyMood:
          Type: Api
          Properties:
            Path: /misc/survey/mood
            Method: POST
            RestApiId: !Ref Api
        SurveyUlcers:
          Type: Api
          Properties:
            Path: /misc/survey/ulcers
            Method: POST
            RestApiId: !Ref Api
        SurveyVital:
          Type: Api
          Properties:
            Path: /misc/survey/vital
            Method: POST
            RestApiId: !Ref Api
        SurveyUrinary:
          Type: Api
          Properties:
            Path: /misc/survey/urinary
            Method: POST
            RestApiId: !Ref Api
        SurveyDialysis:
          Type: Api
          Properties:
            Path: /misc/survey/dialysis
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          EMAIL_SOURCE: !Ref EmailSource
          EMAIL_SOURCE_ARN: !Ref EmailSourceArn
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret
          USE_TWILIO: !Ref UseTwilio
          SMS_ENABLED: !Ref TwilioSMSEnabled

Outputs:
  MiscApi:
    Description: 'API Gateway endpoint URL for NonProd stage for Misc Service'
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
