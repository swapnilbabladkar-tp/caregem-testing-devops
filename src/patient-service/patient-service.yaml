AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  patient-service

  SAM Template for patient-service

Parameters:
  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: /caregem/VpcSubnet
  LambdaSecurityGroupId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/VpcSg
  AuthorizerLambdaArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AuthorizerLambdaArn
  Stage:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/Stage
  CognitoUserPool:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/CognitoUserPool
  AwsRegion:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/AwsRegion
  UserProfileTableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/UserProfileTableName
  MysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MysqlSecret
  MlprepMysqlSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MlprepMysqlSecret
  AccessLogArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: AccessLogArn
    Default: /caregem/AccessLogArn
  MessageSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /caregem/MessageSecret

Globals:
  Function:
    Timeout: 5
    MemorySize: 512
    Runtime: python3.9
    Architectures:
      - x86_64
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroupId
      SubnetIds: !Ref PrivateSubnets
    Environment:
      Variables:
        LOG_LEVEL: 'INFO'
        DB_SECRET_NAME: !Ref MysqlSecret
        MLPREP_SECRET_NAME: !Ref MlprepMysqlSecret
        DYNAMODB_REGION: !Ref AwsRegion
        AWSREGION: !Ref AwsRegion
        USER_POOL_REGION: !Ref AwsRegion
        USER_PROFILE_TABLE_NAME: !Ref UserProfileTableName
        USER_POOL_ID: !Ref CognitoUserPool
  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: true
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"

Resources:
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/utilLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  PatientLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../layers/patientLayer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  PatientApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Name: PatientApi
      Description: Patient Service
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !Ref AuthorizerLambdaArn
      AccessLogSetting:
        DestinationArn: !Ref AccessLogArn
        Format: '{
          "requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod", "path":"$context.path", "resourcePath":"$context.resourcePath", "status":"$context.status", "responseLatency":"$context.responseLatency",
          "integrationRequestId":"$context.integration.requestId", "functionResponseStatus":"$context.integration.status", "authorizeResultStatus":"$context.authorize.status", "authorizerServiceStatus":"$context.authorizer.status",
          "authorizerRequestId":"$context.authorizer.requestId","authorizeError":"$context.authorize.error", "claims": "$context.authorizer.claims",
          "ip":"$context.identity.sourceIp", "userAgent":"$context.identity.userAgent", "principalId":"$context.authorizer.principalId", "cognitoUser":"$context.identity.cognitoIdentityId", "user":"$context.identity.user",
          "apiId":"$context.apiId"
        }'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: caregem-secret-manager-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:TagResource
                  - secretsmanager:ListSecrets
                Resource: '*'
        - PolicyName: caregem-cognito-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminAddUserToGroup
                Resource: '*'
        - PolicyName: caregem-dynamodb-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:ConditionCheckItem
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  PatientDiagnosis:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PatientDiagnosis
      CodeUri: ./
      Handler: patient_diagnosis.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetDiagnosis:
          Type: Api
          Properties:
            Path: /patient/diagnosis/{patient_internal_id}
            Method: GET
            RestApiId: !Ref PatientApi
        SaveDiagnosis:
          Type: Api
          Properties:
            Path: /patient/diagnosis/{patient_internal_id}
            Method: POST
            RestApiId: !Ref PatientApi
        DeleteDiagnosis:
          Type: Api
          Properties:
            Path: /patient/diagnosis/{patient_internal_id}
            Method: DELETE
            RestApiId: !Ref PatientApi

  PatientListing:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Listing-Lambda
      CodeUri: ./
      Handler: patient_listing.lambda_handler
      Timeout: 15
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientList:
          Type: Api
          Properties:
            Path: /patient/patients
            Method: GET
            RestApiId: !Ref PatientApi

  PatientProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Profile-Lambda
      CodeUri: ./
      Handler: patient_profile.lambda_handler
      Layers:
        - !Ref UtilsLayer
        - !Ref PatientLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientList:
          Type: Api
          Properties:
            Path: /patient/patients/{patient_internal_id}
            Method: GET
            RestApiId: !Ref PatientApi
      Environment:
        Variables:
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret

  PatientLabData:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Lab-Data
      CodeUri: ./
      Handler: patient_lab_data.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientLabDataList:
          Type: Api
          Properties:
            Path: /patient/labdata/{patient_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientAlertTrend:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Alert-Trend
      CodeUri: ./
      Handler: patient_alert_trend.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientAlertTrendList:
          Type: Api
          Properties:
            Path: /patient/alerttrend/{patient_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientUtilization:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Utilization
      CodeUri: ./
      Handler: patient_utilization.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientUtlizationList:
          Type: Api
          Properties:
            Path: /patient/utilization/{patient_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientPerformanceMetrics:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Performance-Metrics
      CodeUri: ./
      Handler: patient_performance_metrics.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientUtlizationList:
          Type: Api
          Properties:
            Path: /patient/performancemetrics/{patient_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientRiskProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Paitent-Risk-Profile
      CodeUri: ./
      Handler: patient_risk_profile.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientRiskProfileList:
          Type: Api
          Properties:
            Path: /patient/risk_profile/{patient_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientGuidelines:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Guidelines
      CodeUri: ./
      Handler: patient_guidelines.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientGuidelinesList:
          Type: Api
          Properties:
            Path: /patient/guidelines/{patient_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientSurveyLinks:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Survey-Links
      CodeUri: ./
      Handler: patient_survey_links.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientSurveyLinksList:
          Type: Api
          Properties:
            Path: /patient/survey/{type}/{patient_internal_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientVitalSigns:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Vital-Signs
      CodeUri: ./
      Handler: patient_vital_signs.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientVitalSignsList:
          Type: Api
          Properties:
            Path: /patient/vital_signs/{patient_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientMedicalInfo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Medical-Info
      CodeUri: ./
      Handler: patient_medical_info.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientMedicalInfoList:
          Type: Api
          Properties:
            Path: /patient/medicalinfo/{symptoms}/{patient_internal_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientStaff:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Staff
      CodeUri: ./
      Handler: patients_staff.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientStaffList:
          Type: Api
          Properties:
            Path: /patient/patients/me/staff
            Method: GET
            RestApiId: !Ref PatientApi
      Environment:
        Variables:
          ENCRYPTION_KEY_SECRET_ID: !Ref MessageSecret

  PatientFluidMetrics:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Fluid-Metrics
      CodeUri: ./
      Handler: patient_fluid_metrics.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientHasFluidMetric:
          Type: Api
          Properties:
            Path: /patient/patients/hasfluidmetrics/{patient_internal_id}
            Method: GET
            RestApiId: !Ref PatientApi
        PatientFluidMetric:
          Type: Api
          Properties:
            Path: /patient/patients/fluid_metric/{patient_internal_id}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientHasChartsStatus:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Has-Charts-Status
      CodeUri: ./
      Handler: patient_charts_status.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientHasChartsQuery:
          Type: Api
          Properties:
            Path: /patient/patients/hascharts/{patient_internal_id}/{symptom_type}
            Method: GET
            RestApiId: !Ref PatientApi

  PatientDeviceUpdate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Patient-Device-Update-Status
      CodeUri: ./
      Handler: patient_device.lambda_handler
      Layers:
        - !Ref UtilsLayer
      Role: !GetAtt LambdaRole.Arn
      Events:
        PatientDevice:
          Type: Api
          Properties:
            Path: /patient/device/reading/{model_type}
            Method: POST
            RestApiId: !Ref PatientApi
            Auth:
              Authorizer: 'NONE'

Outputs:
  PatientApi:
    Description: 'API Gateway endpoint URL for NonProd stage for Patient Service'
    Value: !Sub 'https://${PatientApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
