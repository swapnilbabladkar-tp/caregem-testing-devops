AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Secrets Manager

Parameters:
  Stage:
    Type: String
    Default: prod

  DevicePassword:
    Type: String
    Default: placeholder

  DBUsername:
    Type: String
    Default: dbadmin

  DBPassword:
    Type: String
    Default: placeholder

  DBEngine:
    Type: String
    Default: mysql

  DBHost:
    Type: String
    Default: rds-caregemdb-ryknpcsmihm9.cvget6zzoha7.us-east-1.rds.amazonaws.com (RDS endpoint)

  DBPort:
    Type: String
    Default: 3306

  DBInstanceID:
    Type: String
    Default: rds-caregemdb-ryknpcsmihm9

  MLPrepDBName:
    Type: String
    Default: mlprep-uat

  CarexDBName:
    Type: String
    Default: carex_uat

  SftpCDSUsername:
    Type: String
    Default: sftp.cds.care

  SftpCDSHost:
    Type: String
    Default: carelogiq_prod

  SftpCDSPassword:
    Type: String
    Default: placeholder

  SftpCDSDir:
    Type: String
    Default: carelogiq_prod

  BillingCDSServer:
    Type: String
    Default: placeholder

  BillingCDSToken:
    Type: String
    Default: placeholder

  CognitoUserClientID:
    Type: String
    Default: placeholder

  SMSAccountID:
    Type: String
    Default: AC3d934f27abf2b0136b8559c8057cf598

  SMSAuthToken:
    Type: String
    Default: 07ef9ea0566b58a11dfd1291b0d4cea8

  SMSFrom:
    Type: String
    Default: '+17085723344'

Resources:
  CarexDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/carex'
      SecretString: !Sub '{"username": "${DBUsername}", "password": "${DBPassword}", "engine": "${DBEngine}", "host": "${DBHost}", "port": "${DBPort}", "dbname": "${CarexDBName}", "dbInstanceIdentifier": "${DBInstanceID}"}'

  MLPrepDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/mlprep'
      Description: mlprep db details
      SecretString: !Sub '{"username": "${DBUsername}", "password": "${DBPassword}", "engine": "${DBEngine}", "host": "${DBHost}", "port": "${DBPort}", "dbname": "${MLPrepDBName}", "dbInstanceIdentifier": "${DBInstanceID}"}'

  SFTPCDSSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/sftp_cds'
      SecretString: !Sub '{"host": "${SftpCDSHost}", "username": "${SftpCDSUsername}", "password": "${SftpCDSPassword}", "dir": "${SftpCDSDir}"}'

  BillingCDSSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/billing_cds'
      SecretString: !Sub '{"CDS_SERVER": "${BillingCDSServer}", "CDS_TOKEN": "${BillingCDSToken}"}'

  CognitoSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/cognito'
      SecretString: !Sub '{"COGNITO_USER_CLIENT_ID": "${CognitoUserClientID}"}'

  ApiKeysSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/api_keys'
      SecretString: !Sub '{"device_password": "${DevicePassword}"}'

  ChimeSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/awscreds'
      Description: Access to AWS creds for Amazon Chime

  SMSCredSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${Stage}/caregem/sms_cred'
      SecretString: !Sub '{"sms_account_id": "${SMSAccountID}", "auth_token": "${SMSAccountID}", "sms_from": "${SMSFrom}"}'
